version: '3.7'
services:
  nginx:
    # image: openresty/openresty:alpine
    # image: nginx:latest
    build:
      context: nginx/
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "80"
    depends_on:
      - redis
      - php  
   # deploy:
   #   replicas: 2
   #   update_config:
   #     parallelism: 2
   #     delay: 10s
   #     order: start-first    
   # external_links:
   #   - php:fpm
    restart: always
    networks:
      # - "lnmp-env"
      elk:
        ipv4_address: 172.25.0.5
    volumes:
      - ./www/:/var/www/html/:rw
      - ./conf/nginx/conf.d:/etc/nginx/conf.d/:rw
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:rw
      # - ./conf/nginx/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf:rw
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
      # - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:rw
        #- ./conf/nginx/mime.types:/etc/nginx/mime.types:rw
      - ./log/nginx/:/var/log/nginx/:rw
 
  php:
    #image: ligang7138/php-7.3.1-fpm-alpine
    image: ligang7138/php-7.3.3-fpm-zts-swoole
    #build: ./php/php72/
    container_name: php-7.3
    #可以不用ports，就不占用宿主机的9000端口了，容器内部还是可以通过自己的9000通信的
    ports:
      - "9000:9000"      
    expose:
      - "9000"
    volumes:
      - ./www/:/var/www/html/:rw
      #- ./conf/php/php.ini:/usr/local/etc/php/php.ini:rw
      # - ./conf/php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:rw
      - ./log/php-fpm/:/var/log/php-fpm/:rw
    #external_links:
    depends_on:
      - mysql
      - redis
    restart: always
    networks:
      # - "lnmp-env"
      elk:
        ipv4_address: 172.25.0.8
  mysql:
    # image: mysql 
    build:
      context: mariadb/
    container_name: mysql
    volumes:
      - mysqldata:/var/lib/mysql
      - ./mariadb/conf.d:/etc/mysql/conf.d:ro
      - ./mariadb/my.cnf:/etc/mysql/my.cnf:ro
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
      # - ./log/mysql/:/var/log/mysql/:rw
      - mysqllog:/var/log/mysql
      
    ports:
      - "3306:3306"
    networks:
      # - "lnmp-env"
      elk:
        ipv4_address: 172.25.0.6
    environment:
      MYSQL_ROOT_PASSWORD: root
    restart: always  
  #redis单机
  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redisdata:/data
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    restart: always
    ports:
      - "6379:6379"    
  # redis-cluster:
  #   image: redis:latest
  #   container_name: redis
  #   ports:
  #     - "6379:6379"
    networks:  
      # - "lnmp-env"
      elk:
  zoo1:
    image: wurstmeister/zookeeper
    restart: unless-stopped
    hostname: zoo1
    ports:
      - "2181:2181"
    container_name: zookeeper
  kafka1:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.25.0.16
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "stream-in:2:1,stream-out:2:1"
    depends_on:
      - zoo1
    container_name: kafka1
    networks:
      # - "lnmp-env"
      elk:
        ipv4_address: 172.25.0.16
  kafka2:
    image: wurstmeister/kafka
    ports:
      - "9093:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.25.0.17
      KAFKA_ADVERTISED_PORT: 9093
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zoo1
    container_name: kafka2
    networks:
      # - "lnmp-env"
      elk:
        ipv4_address: 172.25.0.17     

networks:
  # lnmp-env:
  #   driver: bridge
  elk:
    driver: bridge
    ipam:
      config:
       - subnet: 172.25.0.0/16    

#volumes:
    #db-data:
volumes:
  esdata:
    driver: local
  mysqldata:
    driver: local
  mysqllog:
    driver: local
  redisdata:
    driver: local    
