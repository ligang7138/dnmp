version: '3.7'
services:
  nginx:
    # image: openresty/openresty:alpine
    # image: nginx:latest
    build:
      context: nginx/
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "80"
    depends_on:
      # - redis
      - php  
   # deploy:
   #   replicas: 2
   #   update_config:
   #     parallelism: 2
   #     delay: 10s
   #     order: start-first    
   # external_links:
   #   - php:fpm
    restart: always
    networks:
      # - "lnmp-env"
      web-php-net:
        ipv4_address: 172.25.0.5
    volumes:
      - ./www/:/var/www/html/:rw
      - ./conf/nginx/conf.d:/etc/nginx/conf.d/:rw
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:rw
      # - ./conf/nginx/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf:rw
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
      # - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:rw
        #- ./conf/nginx/mime.types:/etc/nginx/mime.types:rw
      - ./log/nginx/:/var/log/nginx/:rw
 
  php:
    #image: ligang7138/php-7.3.1-fpm-alpine
    image: ligang7138/php-7.3.3-fpm-zts-swoole
    #build: ./php/php72/
    container_name: php-7.3
    #可以不用ports，就不占用宿主机的9000端口了，容器内部还是可以通过自己的9000通信的
    ports:
      - "9000:9000"      
    expose:
      - "9000"
    volumes:
      - ./www/:/var/www/html/:rw
      #- ./conf/php/php.ini:/usr/local/etc/php/php.ini:rw
      # - ./conf/php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:rw
      - ./log/php-fpm/:/var/log/php-fpm/:rw
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
      - /usr/local/bin/composer:/usr/local/bin/composer
    #external_links:
    depends_on:
      - mysql
      # - redis
    restart: always
    networks:
      # - "lnmp-env"
      web-php-net:
        ipv4_address: 172.25.0.8
  mysql:
    # image: mysql 
    build:
      context: mariadb/
    container_name: mysql
    volumes:
      - mysqldata:/var/lib/mysql
      - ./mariadb/conf.d:/etc/mysql/conf.d:ro
      - ./mariadb/my.cnf:/etc/mysql/my.cnf:ro
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
      # - ./log/mysql/:/var/log/mysql/:rw
      - mysqllog:/var/log/mysql
      
    ports:
      - "3306:3306"
    networks:
      # - "lnmp-env"
      web-php-net:
        ipv4_address: 172.25.0.6
    environment:
      MYSQL_ROOT_PASSWORD: root
    restart: always  
  #redis单机
  # redis:
  #   image: redis:latest
  #   container_name: redis
  #   volumes:
  #     - redisdata:/data
  #     - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
  #   restart: always
  #   ports:
  #     - "6379:6379"    
  # redis-cluster:
  #   image: redis:latest
  #   container_name: redis
  #   ports:
  #     - "6379:6379"
    # networks:  
    #   # - "lnmp-env"
    #   web-php-net:
  # zoo1:
  #   image: wurstmeister/zookeeper
  #   restart: unless-stopped
  #   hostname: zoo1
  #   ports:
  #     - "2181:2181"
  #   container_name: zookeeper
  #   networks:
  #     # - "lnmp-env"
  #     web-php-net:
  #       ipv4_address: 172.25.0.10
  # kafka1:
  #   image: wurstmeister/kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     # KAFKA_ADVERTISED_HOST_NAME: "PLAINTEXT://172.25.0.16"
  #     # KAFKA_ADVERTISED_PORT: 9092
  #     KAFKA_HOST_NAME: 172.25.0.16
  #     KAFKA_ADVERTISED_HOST_NAME: 172.25.0.16
  #     DOCKER_HOST: 172.25.0.16:2375
  #     KAFKA_LISTENERS: PLAINTEXT://172.25.0.16:9092
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.25.0.16:9092
  #     KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
  #     HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     # KAFKA_CREATE_TOPICS: "stream-in:2:1,stream-out:2:1"
  #   depends_on:
  #     - zoo1
  #   container_name: kafka1
  #   restart: unless-stopped
  #   networks:
  #     # - "lnmp-env"
  #     web-php-net:
  #       ipv4_address: 172.25.0.16
  elasticsearch:
    build:
      context: elasticsearch/
    container_name: elasticsearch
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: "123456"
    networks:
      web-php-net:
        ipv4_address: 172.25.0.2
    restart: always

  logstash:
    build:
      context: logstash/
    container_name: logstash
    volumes:
      - ./logstash/config:/usr/share/logstash/config:rw
      - ./logstash/pipeline:/usr/share/logstash/pipeline:rw
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
      - mysqllog:/xlogs/mysqllog:rw
      - ./log/nginx/:/var/log/nginx/:rw
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    user: "root"
    networks:
      web-php-net:
        ipv4_address: 172.25.0.3
    depends_on:
      - elasticsearch
    restart: always

  kibana:
    build:
      context: kibana/
    container_name: kibana
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    ports:
      - "5601:5601"
    networks:
      web-php-net:
        ipv4_address: 172.25.0.4
    depends_on:
      - elasticsearch
    restart: always

  metricbeat:
    build:
      context: metricbeat/
    container_name: metricbeat
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - ./metricbeat/modules.d:/usr/share/metricbeat/modules.d:ro
      -  /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    user: "root"
    network_mode: host
    depends_on:
      - elasticsearch
      - kibana
      - logstash
    command: -system.hostfs=/hostfs -e
    restart: always

  kafka1:
    image: wurstmeister/kafka
    restart: always
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      # KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
      # KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      JMX_PORT: 9999 
    volumes:
      - ./kafka1/logs:/kafka
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      web-php-net:
        ipv4_address: 172.25.0.36

  kafka2:
    image: wurstmeister/kafka
    restart: always
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://kafka2:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:218
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      JMX_PORT: 9988
    volumes:
      - ./kafka2/logs:/kafka
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    depends_on:  # 连接本compose文件以外的container
      - zoo1
      - zoo2
      - zoo3
    networks:
      web-php-net:
        ipv4_address: 172.25.0.37

  kafka-manager:
    image: sheepkiller/kafka-manager:latest
    restart: always
    container_name: kafa-manager
    hostname: kafka-manager
    volumes:
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    ports:
      - "9002:9000"
    # depends_on:           # 连接本compose文件创建的container
    # external_links:   # 连接本compose文件以外的container
    depends_on:
      - zoo1
      - kafka1
      - kafka2
      - zoo2
      - zoo3
    environment:
      ZK_HOSTS: zoo1:2181,zoo2:2181,zoo3:2181
      KAFKA_BROKERS: kafka1:9092,kafka2:9093,kafka3:9094
      # ZK_HOSTS: zoo1:2181
      # KAFKA_BROKERS: kafka1:9092,kafka2:9092
      APPLICATION_SECRET: letmein
      KM_ARGS: -Djava.net.preferIPv4Stack=true
    networks:
      web-php-net:
        ipv4_address: 172.25.0.38 
  zoo1:
    image: zookeeper
    restart: always
    hostname: zoo1
    container_name: zoo1
    ports:
      - 2181:2181
    volumes:
      - "./zoo1/data:/data"
      - "./log/zoo1/datalog:/datalog"
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
      # ZOO_SERVERS: server.1=zoo1:2888:3888
    networks:
      web-php-net:
        ipv4_address: 172.25.0.30
  zoo2:
    image: zookeeper
    restart: always
    hostname: zoo2
    container_name: zoo2
    ports:
      - 2180:2181
    volumes:
      - "./zoo2/data:/data"
      - "./log/zoo2/datalog:/datalog"
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      web-php-net:
        ipv4_address: 172.25.0.31

  zoo3:
    image: zookeeper
    restart: always
    hostname: zoo3
    container_name: zoo3
    ports:
      - 2179:2181
    volumes:
      - "./zoo3/data:/data"
      - "./log/zoo3/datalog:/datalog"
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      web-php-net:
        ipv4_address: 172.25.0.32
# #设置内部网络        
# networks:
#   # lnmp-env:
#   #   driver: bridge
#   web-php-net:
#     driver: bridge
#     ipam:
#       config:
#        - subnet: 172.25.0.0/16
#使用外部网络  docker network create --driver bridge --subnet 172.25.0.0/24 --gateway 172.25.0.1 web-php-net
networks:
  web-php-net:
   external:
      name: web-php-net   

#volumes:
    #db-data:
volumes:
  esdata:
    driver: local
  mysqldata:
    driver: local
  mysqllog:
    driver: local
  redisdata:
    driver: local    
